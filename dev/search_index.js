var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = EvolutionModels","category":"page"},{"location":"#EvolutionModels","page":"Home","title":"EvolutionModels","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for EvolutionModels.","category":"page"},{"location":"","page":"Home","title":"Home","text":"🚧 Work in Progress: This package is under active development.","category":"page"},{"location":"#Introduction-to-DNA-Substitution-Models","page":"Home","title":"Introduction to DNA Substitution Models","text":"","category":"section"},{"location":"#Jukes-Cantor-(JC69)","page":"Home","title":"Jukes-Cantor (JC69)","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The simplest model of DNA evolution, assuming:","category":"page"},{"location":"","page":"Home","title":"Home","text":"Equal base frequencies (πA = πC = πG = πT = 1/4)\nEqual substitution rates between all nucleotides\nSingle parameter μ controlling overall mutation rate","category":"page"},{"location":"","page":"Home","title":"Home","text":"Rate matrix Q has form:","category":"page"},{"location":"","page":"Home","title":"Home","text":"Q = beginpmatrix\n-3alpha  alpha  alpha  alpha \nalpha  -3alpha  alpha  alpha \nalpha  alpha  -3alpha  alpha \nalpha  alpha  alpha  -3alpha\nendpmatrix","category":"page"},{"location":"","page":"Home","title":"Home","text":"where α = μ/4","category":"page"},{"location":"#HKY85-Model","page":"Home","title":"HKY85 Model","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Extends JC69 by introducing:","category":"page"},{"location":"","page":"Home","title":"Home","text":"Arbitrary base frequencies (πA, πC, πG, πT)\nDifferent rates for transitions (A↔G, C↔T) vs transversions\nRate ratio κ between transitions and transversions","category":"page"},{"location":"","page":"Home","title":"Home","text":"Rate matrix elements:","category":"page"},{"location":"","page":"Home","title":"Home","text":"q_ij = begincases\nmukappapi_j  textfor transitions \nmupi_j  textfor transversions \n-sum_kneq i q_ik  textfor  i = j\nendcases","category":"page"},{"location":"#General-Time-Reversible-(GTR)","page":"Home","title":"General Time-Reversible (GTR)","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Most general neutral model with properties:","category":"page"},{"location":"","page":"Home","title":"Home","text":"Arbitrary base frequencies π\nSix substitution rate parameters (rAC, rAG, rAT, rCG, rCT, rGT)\nSatisfies detailed balance: πᵢqᵢⱼ = πⱼqⱼᵢ","category":"page"},{"location":"","page":"Home","title":"Home","text":"Rate matrix Q = {qᵢⱼ} where:","category":"page"},{"location":"","page":"Home","title":"Home","text":"q_ij = begincases\nmu r_ijpi_j  textfor  i neq j \n-sum_kneq i q_ik  textfor  i = j\nendcases","category":"page"},{"location":"","page":"Home","title":"Home","text":"Note: Both JC69 and HKY85 are special cases of GTR with appropriate constraints on rates and frequencies.","category":"page"},{"location":"#Usage","page":"Home","title":"Usage","text":"","category":"section"},{"location":"#Basic-Example","page":"Home","title":"Basic Example","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"using EvolutionModels\nusing BioSequences\n\n# Create JC69 model\nmodel = create_model(JC69Model, 0.1)\n\n# Simulate evolution\nseq = dna\"ATCG\"\nevolved = evolve_sequence(model, seq, 1.0)\n\n# Compute likelihood\nlogL = sequence_likelihood(model, seq, evolved, 1.0)","category":"page"},{"location":"#Distance-Computation","page":"Home","title":"Distance Computation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"using EvolutionModels\nusing FASTX\nusing Optim\n\n# Read alignment\nseqs = read_alignment(\"alignment.fasta\")\n\n# Create model and compute distances\nmodel = create_model(JC69Model, 0.1)\nresult = compute_distances(model, seqs)\n\n# Print distance matrix\nprint_distance_matrix(result)","category":"page"},{"location":"#Using-GTR-Model","page":"Home","title":"Using GTR Model","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"# Define base frequencies\nπ = [0.3, 0.2, 0.2, 0.3]  # A,C,G,T\n\n# Define GTR rates\nrates = GTRRates(\n    1.0,  # A↔C\n    2.0,  # A↔G\n    1.0,  # A↔T\n    1.0,  # C↔G\n    2.0,  # C↔T\n    1.0   # G↔T\n)\n\n# Create model\nmodel = create_model(GTRModel, 0.1, π, rates)","category":"page"},{"location":"#API-Reference","page":"Home","title":"API Reference","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Modules = [EvolutionModels]","category":"page"},{"location":"#EvolutionModels.DNAModel","page":"Home","title":"EvolutionModels.DNAModel","text":"DNAModel <: EvolutionModel\n\nAbstract type for DNA evolution models.\n\n\n\n\n\n","category":"type"},{"location":"#EvolutionModels.EvolutionModel","page":"Home","title":"EvolutionModels.EvolutionModel","text":"EvolutionModel\n\nAbstract type for all molecular evolution models.\n\n\n\n\n\n","category":"type"},{"location":"#EvolutionModels.Model","page":"Home","title":"EvolutionModels.Model","text":"Model{S<:SequenceType}\n\nConcrete implementation of an evolution model.\n\n\n\n\n\n","category":"type"},{"location":"#EvolutionModels.ProteinModel","page":"Home","title":"EvolutionModels.ProteinModel","text":"ProteinModel <: EvolutionModel\n\nAbstract type for protein evolution models.\n\n\n\n\n\n","category":"type"},{"location":"#EvolutionModels.SequenceType","page":"Home","title":"EvolutionModels.SequenceType","text":"SequenceType\n\nAbstract type for sequence alphabets (DNA or Protein).\n\n\n\n\n\n","category":"type"},{"location":"#EvolutionModels.compute_q_matrix-Tuple{Matrix{Float64}, LinearAlgebra.Diagonal{Float64, V} where V<:AbstractVector{Float64}}","page":"Home","title":"EvolutionModels.compute_q_matrix","text":"Compute Q matrix (generator matrix) from R and P.\n\n\n\n\n\n","category":"method"},{"location":"#EvolutionModels.create_model-Tuple{Type{GTRModel}, Float64, Vector{Float64}, Matrix{Float64}}","page":"Home","title":"EvolutionModels.create_model","text":"create_model(::Type{GTRModel}, μ::Float64, π::Vector{Float64}, rates::Matrix{Float64}) -> Model{DNAType}\n\nCreate a General Time-Reversible (GTR) model of DNA evolution.\n\nThe GTR model is the most general neutral, independent sites, reversible model:\n\nArbitrary base frequencies π\nArbitrary symmetric rate matrix\nSatisfies detailed balance: πᵢqᵢⱼ = πⱼqⱼᵢ\n\nArguments\n\nμ::Float64: Overall mutation rate scaling factor (must be positive)\nπ::Vector{Float64}: Vector of base frequencies [πA, πC, πG, πT], must sum to 1\nrates::Matrix{Float64}: 4×4 symmetric matrix of relative substitution rates\n\nReturns\n\nModel{DNAType}: A GTR model with rate matrix Q = μR⋅diag(π) where:\nR is the symmetric rate matrix\nqᵢⱼ = μrᵢⱼπⱼ for i ≠ j\nqᵢᵢ = -∑ⱼ≠ᵢ qᵢⱼ\n\nExample\n\n# Create GTR model with custom rates\nπ = [0.3, 0.2, 0.2, 0.3]  # Base frequencies\nrates = [0.0 1.0 2.0 1.0;  # Symmetric rate matrix\n         1.0 0.0 1.0 2.0;\n         2.0 1.0 0.0 1.0;\n         1.0 2.0 1.0 0.0]\nmodel = create_model(GTRModel, 0.1, π, rates)\n\nReferences\n\nTavaré, S. (1986). Some probabilistic and statistical problems in the analysis of DNA sequences. Lectures on Mathematics in the Life Sciences, 17:57-86.\n\n\n\n\n\n","category":"method"},{"location":"#EvolutionModels.create_model-Tuple{Type{HKY85Model}, Float64, Vector{Float64}, Float64}","page":"Home","title":"EvolutionModels.create_model","text":"create_model(::Type{HKY85Model}, μ::Float64, π::Vector{Float64}, κ::Float64) -> Model{DNAType}\n\nCreate a Hasegawa-Kishino-Yano (1985) model of DNA evolution.\n\nThe HKY85 model features:\n\nArbitrary base frequencies π\nDifferent rates for transitions (A↔G, C↔T) vs transversions\nRate ratio κ between transitions and transversions\n\nArguments\n\nμ::Float64: Overall mutation rate scaling factor (must be positive)\nπ::Vector{Float64}: Vector of base frequencies [πA, πC, πG, πT], must sum to 1\nκ::Float64: Transition/transversion rate ratio (must be positive)\n\nReturns\n\nModel{DNAType}: An HKY85 model with rate matrix Q where:\nqᵢⱼ = μκπⱼ for transitions\nqᵢⱼ = μπⱼ for transversions\nqᵢᵢ = -∑ⱼ≠ᵢ qᵢⱼ\n\nExample\n\n# Create HKY85 model with unequal base frequencies\nπ = [0.3, 0.2, 0.2, 0.3]  # A,C,G,T frequencies\nmodel = create_model(HKY85Model, 0.1, π, 2.0)  # κ=2 means transitions occur 2× faster\n\nReferences\n\nHasegawa, M., Kishino, H., and Yano, T. (1985). Dating of the human-ape splitting by a molecular clock of mitochondrial DNA. J. Mol. Evol., 22(2):160-174.\n\n\n\n\n\n","category":"method"},{"location":"#EvolutionModels.create_model-Tuple{Type{JC69Model}, Float64}","page":"Home","title":"EvolutionModels.create_model","text":"create_model(::Type{JC69Model}, μ::Float64) -> Model{DNAType}\n\nCreate a Jukes-Cantor (1969) model of DNA evolution.\n\nThe JC69 model assumes:\n\nEqual base frequencies (π = 0.25 for all bases)\nEqual substitution rates between all nucleotides\nSingle parameter μ controlling overall mutation rate\n\nArguments\n\nμ::Float64: Overall mutation rate scaling factor (must be positive)\n\nReturns\n\nModel{DNAType}: A JC69 model with rate matrix Q where:\nqᵢⱼ = μ/4 for i ≠ j (off-diagonal elements)\nqᵢᵢ = -3μ/4 (diagonal elements)\n\nExample\n\n# Create JC69 model with rate 0.1\nmodel = create_model(JC69Model, 0.1)\n\n# Access model properties\nπ = stationary_frequencies(model)  # All 0.25\nR = rate_matrix(model)  # Symmetric rate matrix\n\nReferences\n\nJukes, T.H. and Cantor, C.R. (1969). Evolution of Protein Molecules.\n\n\n\n\n\n","category":"method"},{"location":"#EvolutionModels.create_model-Tuple{Type{LGModel}, Float64}","page":"Home","title":"EvolutionModels.create_model","text":"Create an LG model\n\n\n\n\n\n","category":"method"},{"location":"#EvolutionModels.create_model-Tuple{Type{WAGModel}, Float64}","page":"Home","title":"EvolutionModels.create_model","text":"Create a WAG model\n\n\n\n\n\n","category":"method"},{"location":"#EvolutionModels.evolve_sequence-Tuple{Model{DNAType}, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, Float64}","page":"Home","title":"EvolutionModels.evolve_sequence","text":"evolve_sequence(model::Model{DNAType}, seq::LongDNA{4}, t::Float64; \n               rng::AbstractRNG=Random.GLOBAL_RNG) -> LongDNA{4}\n\nSimulate DNA sequence evolution under a continuous-time Markov model for time t.\n\nThe function implements the following process:\n\nComputes transition probability matrix P(t) = exp(Qt)\nFor each site, samples new nucleotide from the probability distribution given by the corresponding row of P(t)\nPreserves non-standard nucleotides (gaps, ambiguous bases) unchanged\n\nArguments\n\nmodel::Model{DNAType}: DNA evolution model (JC69, HKY85, or GTR)\nseq::LongDNA{4}: Input DNA sequence\nt::Float64: Evolution time (branch length)\nrng::AbstractRNG=Random.GLOBAL_RNG: Random number generator\n\nReturns\n\nLongDNA{4}: Evolved DNA sequence of the same length as input\n\nExample\n\n# Create model and evolve sequence\nmodel = create_model(JC69Model, 0.1)\nseq = dna\"ATCG\"\nevolved = evolve_sequence(model, seq, 1.0)\n\n# Use specific RNG for reproducibility\nrng = MersenneTwister(42)\nevolved = evolve_sequence(model, seq, 1.0, rng=rng)\n\nNote: For very small t, few changes are expected. As t→∞, nucleotide frequencies approach the model's stationary distribution π.\n\n\n\n\n\n","category":"method"},{"location":"#EvolutionModels.evolve_sequence-Tuple{Model{ProteinType}, BioSequences.LongAA, Float64}","page":"Home","title":"EvolutionModels.evolve_sequence","text":"evolve_sequence(model::Model{ProteinType}, seq::LongAA, t::Float64; \n               rng::AbstractRNG=Random.GLOBAL_RNG) -> LongAA\n\nSimulate protein sequence evolution under empirical amino acid substitution models.\n\nThe function implements the following process:\n\nComputes transition probability matrix P(t) = exp(Qt)\nFor each site, samples new amino acid from the probability distribution given by the corresponding row of P(t)\nPreserves non-standard amino acids (gaps, ambiguous residues) unchanged\n\nArguments\n\nmodel::Model{ProteinType}: Protein evolution model (WAG or LG)\nseq::LongAA: Input amino acid sequence\nt::Float64: Evolution time (branch length)\nrng::AbstractRNG=Random.GLOBAL_RNG: Random number generator\n\nReturns\n\nLongAA: Evolved amino acid sequence of the same length as input\n\nExample\n\n# Create model and evolve sequence\nmodel = create_model(WAGModel, 0.1)\nseq = aa\"ARND\"\nevolved = evolve_sequence(model, seq, 1.0)\n\nNote: The empirical models (WAG, LG) use pre-computed rate matrices derived from large protein alignments, representing \"average\" evolutionary patterns.\n\n\n\n\n\n","category":"method"},{"location":"#EvolutionModels.is_transition-Tuple{BioSymbols.DNA, BioSymbols.DNA}","page":"Home","title":"EvolutionModels.is_transition","text":"Check if two symbols are transitions (A↔G or C↔T)\n\n\n\n\n\n","category":"method"},{"location":"#EvolutionModels.rate_matrix-Tuple{Model}","page":"Home","title":"EvolutionModels.rate_matrix","text":"Get the rate matrix R (includes μ scaling).\n\n\n\n\n\n","category":"method"},{"location":"#EvolutionModels.sequence_likelihood-Tuple{Model, Union{BioSequences.LongAA, BioSequences.LongDNA{4}, BioSequences.LongNuc{4, BioSequences.DNAAlphabet{4}}}, Union{BioSequences.LongAA, BioSequences.LongDNA{4}, BioSequences.LongNuc{4, BioSequences.DNAAlphabet{4}}}, Float64}","page":"Home","title":"EvolutionModels.sequence_likelihood","text":"sequence_likelihood(model::Model, seq1::Union{LongDNA{4},LongAA}, \n                   seq2::Union{LongDNA{4},LongAA}, t::Float64) -> Float64\n\nCompute the log-likelihood of evolving from sequence1 to sequence2 in time t under the given evolutionary model.\n\nThe likelihood is computed as:\n\nL = ᵢ P(t)x₁ᵢ x₂ᵢ\n\nwhere P(t) is the transition probability matrix and x₁ᵢ, x₂ᵢ are the states at position i in sequences 1 and 2 respectively.\n\nArguments\n\nmodel::Model: Evolution model (DNA or protein)\nseq1::Union{LongDNA{4},LongAA}: First sequence\nseq2::Union{LongDNA{4},LongAA}: Second sequence\nt::Float64: Evolution time between sequences\n\nReturns\n\nFloat64: Log-likelihood of the evolution from seq1 to seq2\n\nExample\n\n# Compare likelihoods for different evolution times\nmodel = create_model(JC69Model, 0.1)\nseq1 = dna\"ATCG\"\nseq2 = dna\"ATTG\"\n\nL1 = sequence_likelihood(model, seq1, seq2, 0.1)  # Short time\nL2 = sequence_likelihood(model, seq1, seq2, 10.0)  # Long time\n\nNote: Only standard nucleotides/amino acids contribute to the likelihood. Non-standard characters (gaps, ambiguous bases) are ignored in the calculation.\n\n\n\n\n\n","category":"method"},{"location":"#EvolutionModels.stationary_frequencies-Tuple{Model}","page":"Home","title":"EvolutionModels.stationary_frequencies","text":"Get the stationary distribution π.\n\n\n\n\n\n","category":"method"},{"location":"#EvolutionModels.symbol_index-Tuple{BioSymbols.DNA, DNAType}","page":"Home","title":"EvolutionModels.symbol_index","text":"Get index of a symbol in the canonical ordering\n\n\n\n\n\n","category":"method"},{"location":"#EvolutionModels.transition_probability_matrix-Tuple{Model, Float64}","page":"Home","title":"EvolutionModels.transition_probability_matrix","text":"Compute transition probability matrix P(t) = exp(Qt).\n\n\n\n\n\n","category":"method"},{"location":"#EvolutionModels.validate_frequencies-Union{Tuple{S}, Tuple{Vector{Float64}, S}} where S<:SequenceType","page":"Home","title":"EvolutionModels.validate_frequencies","text":"Validate frequencies vector\n\n\n\n\n\n","category":"method"}]
}
